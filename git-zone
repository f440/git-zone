#!/bin/bash

set -e

usage() {
  echo "Usage: git zone [<ref-or-pr>] [-c|--create <new-branch-name>] [-T|--tmux]"
  echo
  echo "Create a new worktree for a given branch, ref, PR number, or PR URL."
  echo "Mimics 'git switch' behavior."
  echo
  echo "Arguments:"
  echo "  ref-or-pr     Reference (branch, tag, commit), PR number, or PR URL."
  echo "                If omitted, uses the current commit."
  echo
  echo "Options:"
  echo "  -c, --create <name>  Create a new branch named <name> before switching."
  echo "  -T, --tmux           Create and attach to a tmux session for the worktree."
  echo "  -h, --help           Show this help message and exit."
}

# --- Argument Parsing ---
REF_OR_PR=""
NEW_BRANCH_NAME=""
TMUX_MODE=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -c|--create)
      if [[ -n "$NEW_BRANCH_NAME" ]]; then
        echo "Error: -c/--create option can only be specified once." >&2
        usage
        exit 1
      fi
      if [[ -z "$2" || "$2" == -* ]]; then
        echo "Error: -c/--create option requires a branch name." >&2
        usage
        exit 1
      fi
      NEW_BRANCH_NAME="$2"
      shift 2
      ;;
    -T|--tmux)
      TMUX_MODE=true
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*)
      echo "Error: Unknown option: $1" >&2
      usage
      exit 1
      ;;
    *)
      if [[ -n "$REF_OR_PR" ]]; then
        echo "Error: Cannot specify more than one reference." >&2
        usage
        exit 1
      fi
      REF_OR_PR="$1"
      shift
      ;;
  esac
done

# --- Validation ---
if [[ -z "$REF_OR_PR" ]]; then
  # If ref-or-pr is not provided, use current commit
  REF_OR_PR="$(git rev-parse HEAD)"
  echo "No reference provided, using current commit: $REF_OR_PR"
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo "Error: Not inside a git repository."
  exit 1
fi
WORKTREE_ROOT="$(git worktree list | awk 'NR==1{print $1}')"

# Detect if input is a PR number or PR URL
is_pr() {
  [[ "$1" =~ ^[0-9]+$ ]] || [[ "$1" =~ github\.com/.+/pull/[0-9]+ ]]
}

# --- Main Logic ---

cd "$WORKTREE_ROOT"

if is_pr "$REF_OR_PR"; then
  # --- PR Handling ---
  if ! command -v gh >/dev/null 2>&1; then
    echo "Error: GitHub CLI (gh) is required for PR checkout functionality."
    exit 1
  fi

  if [[ "$REF_OR_PR" =~ ^[0-9]+$ ]]; then
    PR_NUM="$REF_OR_PR"
  else
    PR_NUM="$(echo "$REF_OR_PR" | grep -o '/pull/[0-9]\+' | cut -d'/' -f3)"
  fi

  if [ -n "$NEW_BRANCH_NAME" ]; then
      BRANCH_NAME_FOR_DIR="$NEW_BRANCH_NAME"
  else
      BRANCH_NAME_FOR_DIR="pr-$PR_NUM"
  fi
  ZONE_DIR="$WORKTREE_ROOT.$BRANCH_NAME_FOR_DIR"

  echo "Setting up worktree for PR $PR_NUM in '$ZONE_DIR'..."

  git worktree add --detach "$ZONE_DIR"
  cd "$ZONE_DIR"

  echo "Checking out PR $REF_OR_PR..."
  if ! gh pr checkout "$REF_OR_PR"; then
    echo "Error: Failed to checkout PR $REF_OR_PR." >&2
    cd "$WORKTREE_ROOT"
    git worktree remove "$ZONE_DIR" 2>/dev/null || true
    exit 1
  fi

  # If -c was used, rename the branch created by 'gh'
  if [ -n "$NEW_BRANCH_NAME" ]; then
    CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
    echo "Renaming branch '$CURRENT_BRANCH' to '$NEW_BRANCH_NAME'."
    git branch -m "$NEW_BRANCH_NAME"
  fi

  echo "Successfully checked out PR $PR_NUM."


else
  # --- Ref (branch, tag, commit) Handling ---
  if [ -n "$NEW_BRANCH_NAME" ]; then
    # Case: git zone <ref> -c <new-branch>
    BRANCH_NAME_FOR_DIR="$NEW_BRANCH_NAME"
    ZONE_DIR="$WORKTREE_ROOT.$BRANCH_NAME_FOR_DIR"
    echo "Creating new branch '$NEW_BRANCH_NAME' from '$REF_OR_PR' in '$ZONE_DIR'..."
    git worktree add -b "$NEW_BRANCH_NAME" "$ZONE_DIR" "$REF_OR_PR"
    cd "$ZONE_DIR"
  else
    # Case: git zone <ref>
    # If ref is an existing local branch, use it.
    if git show-ref --verify --quiet "refs/heads/$REF_OR_PR"; then
        BRANCH_NAME_FOR_DIR="$REF_OR_PR"
        ZONE_DIR="$WORKTREE_ROOT.$BRANCH_NAME_FOR_DIR"
        echo "Creating worktree for existing branch '$REF_OR_PR' in '$ZONE_DIR'..."
        git worktree add "$ZONE_DIR" "$REF_OR_PR"
        cd "$ZONE_DIR"
    else
        # If ref is not a local branch (e.g., remote branch, tag, commit), create detached worktree.
        # Sanitize ref for directory name
        BRANCH_NAME_FOR_DIR=$(echo "$REF_OR_PR" | tr '/' '-')
        ZONE_DIR="$WORKTREE_ROOT.$BRANCH_NAME_FOR_DIR"
        echo "Creating detached worktree for '$REF_OR_PR' in '$ZONE_DIR'..."
        git worktree add --detach "$ZONE_DIR" "$REF_OR_PR"
        cd "$ZONE_DIR"
        echo "Note: Worktree is in a detached HEAD state."
    fi
  fi
fi

if command -v mise >/dev/null; then
  echo "Setting up mise for the new worktree..."
  if [ -f "$WORKTREE_ROOT/.mise.local.toml" ]; then
    ln -sf "$WORKTREE_ROOT/.mise.local.toml" "$ZONE_DIR/.mise.local.toml"
    if ! mise trust "$ZONE_DIR" 2>/dev/null; then
      echo "Warning: Failed to trust mise configuration in $ZONE_DIR" >&2
    fi
    if mise tasks ls 2>/dev/null | grep -q "^zone:setup "; then
      echo "Running zone:setup task..."
      if ! mise run zone:setup "$WORKTREE_ROOT" "$ZONE_DIR" 2>/dev/null; then
        echo "Warning: zone:setup task failed. Continuing without setup." >&2
      fi
    fi
  fi
  echo "Mise setup complete."
fi

echo
echo "ZONE_DIR: $ZONE_DIR"
if command -v zoxide >/dev/null; then
  echo
  echo "Using zoxide to change directory."
  zoxide add "$ZONE_DIR"
fi

if [ "$TMUX_MODE" = true ]; then
  if ! command -v tmux >/dev/null 2>&1; then
    echo "Error: tmux is required for -T option but not found." >&2
    exit 1
  fi
  
  session_name=$(basename "$ZONE_DIR" | tr '.' '_')
  
  if tmux has-session -t "$session_name" 2>/dev/null; then
    echo "tmux session '$session_name' already exists."
    if [ -n "$TMUX" ]; then
      echo "Switching to existing session '$session_name'."
      tmux switch-client -t "$session_name"
    else
      echo "Attaching to existing session '$session_name'."
      tmux attach-session -t "$session_name"
    fi
  else
    if [ -n "$TMUX" ]; then
      echo "Creating new session '$session_name' and switching (directory: $ZONE_DIR)"
      tmux new-session -d -s "$session_name" -c "$ZONE_DIR"
      tmux switch-client -t "$session_name"
    else
      echo "Creating new session '$session_name' (directory: $ZONE_DIR)"
      tmux new-session -s "$session_name" -c "$ZONE_DIR"
    fi
  fi
fi
